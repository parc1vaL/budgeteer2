// <auto-generated />
using System;
using Budgeteer.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Budgeteer.Server.Migrations
{
    [DbContext(typeof(BudgetContext))]
    [Migration("20221115170731_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Budgeteer.Server.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<bool>("OnBudget")
                        .HasColumnType("boolean")
                        .HasColumnName("on_budget");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Budgeteer.Server.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Budgeteer.Server.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("IncomeType")
                        .HasColumnType("integer")
                        .HasColumnName("income_type");

                    b.Property<bool>("IsCleared")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cleared");

                    b.Property<string>("Payee")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("payee");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_type");

                    b.Property<int?>("TransferAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("transfer_account_id");

                    b.Property<int?>("TransferTransactionId")
                        .HasColumnType("integer")
                        .HasColumnName("transfer_transaction_id");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_transactions_account_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_transactions_category_id");

                    b.HasIndex("Payee")
                        .HasDatabaseName("ix_transactions_payee");

                    b.HasIndex("TransferAccountId")
                        .HasDatabaseName("ix_transactions_transfer_account_id");

                    b.HasIndex("TransferTransactionId")
                        .IsUnique()
                        .HasDatabaseName("ix_transactions_transfer_transaction_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("Budgeteer.Server.Entities.Transaction", b =>
                {
                    b.HasOne("Budgeteer.Server.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_accounts_account_id");

                    b.HasOne("Budgeteer.Server.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_transactions_categories_category_id");

                    b.HasOne("Budgeteer.Server.Entities.Account", "TransferAccount")
                        .WithMany()
                        .HasForeignKey("TransferAccountId")
                        .HasConstraintName("fk_transactions_accounts_transfer_account_id");

                    b.HasOne("Budgeteer.Server.Entities.Transaction", "TransferTransaction")
                        .WithOne()
                        .HasForeignKey("Budgeteer.Server.Entities.Transaction", "TransferTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_transactions_transactions_transfer_transaction_id");

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("TransferAccount");

                    b.Navigation("TransferTransaction");
                });

            modelBuilder.Entity("Budgeteer.Server.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Budgeteer.Server.Entities.Category", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
